import dash
from dash import Dash, html, dcc
import plotly.express as px
import pandas as pd
import plotly.graph_objects as go
import numpy as np
import dash_table
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc
import seaborn as sn
import matplotlib.pyplot as plt
%matplotlib inline

data = pd.read_csv('healthy.csv')
data.head()

data.duplicated().sum()

data['Cost of a bottle of water(City)'] = data['Cost of a bottle of water(City)'].str.replace(r'\£', '')
data['Cost of a monthly gym membership(City)'] = data['Cost of a monthly gym membership(City)'].str.replace(r'\£', '')
data['Obesity levels(Country)'] = data['Obesity levels(Country)'].str.replace(r'\%', '')

data=data._convert(numeric=True)

corrMatrix = data.corr()
plt.subplots(figsize=(20,10))

sn.heatmap(corrMatrix, annot=True)


plt.show()



app = dash.Dash(
    external_stylesheets=[dbc.themes.MINTY],meta_tags=[{'name': 'viewport',
                            'content': 'width=device-width, initial-scale=1.0'}]
)

app.layout = dbc.Container([

    dbc.Row(
        dbc.Col(html.H1("Healthy Lifestyle  Cities Dashboard",
                        className='text-center text-dark mb-4 '),
                width=12)
    ),
    
    dbc.Row([dbc.Col([dbc.CardBody([html.H4("Life expectancy", className="card-title text-success"),
                html.P(
                    " Depends mostly on the happniess level"
                    "",
                    className="card-text",
                )]
        ),
    ]),
             
         dbc.Col([dbc.CardBody([html.H4("Happniess level", className="card-title text-success"),
                html.P(
                    " Depends mostly on the Cost bottle of water"
                    "",
                    className="card-text",
                )]
        ),
    ]),
        dbc.Col([dbc.CardBody([html.H4("Rank of healtiest city", className="card-title text-success"),
                html.P(
                    " Depends mostly on the Annual hours worked"
                    "",
                    className="card-text",
                )]
        ),
    ]),
        ]),
    

             
    dbc.Row([

        dbc.Col([
            dcc.Dropdown(id='my-dpdn', multi=False, value='',
                         options=[{'label':x, 'value':x}
                                  for x in sorted(data.columns.unique())]
                         )
        ])
    ]),
        
    dbc.Row([  dbc.Col([dcc.Graph(id='my-hist', figure={}),
        ],
        xs=14, sm=14, md=14, lg=5, xl=5),
             
        dbc.Col([dcc.Graph(id='map', figure={}),
        ],
        xs=14, sm=14, md=14, lg=5, xl=5)
        
        ]), 
     
    
    dbc.Row([dbc.Col([dcc.Graph(id='scatter1', figure={}),
        ], xs=8, sm=12, md=12, lg=5, xl=5
        ),
    
        dbc.Col([dcc.Graph(id='scatter2', figure={}),
        ], xs=8, sm=12, md=12, lg=5, xl=5),
            
        ]),
    
    dbc.Row([  dbc.Col([dcc.Graph(id='bar', figure={}),
        ])
        ]),
    
], fluid=True)

@app.callback(
    Output('my-hist', 'figure'),
    Input('my-dpdn', 'value')
)
def update_hist(selected):
    dff=data[selected]
    figln = px.histogram(dff)
    return figln

@app.callback(
    Output('scatter1', 'figure'),
    Input('my-dpdn', 'value')
)
def update_graph(selected):
    figs1 = px.scatter(data, x='Life expectancy(years) (Country)', y=selected)
    return figs1

@app.callback(
    Output('scatter2', 'figure'),
    Input('my-dpdn', 'value')
)
def update_graph(selected):
    figs1 = px.scatter(data, x='Happiness levels(Country)', y=selected)
    return figs1

@app.callback(
    Output('bar', 'figure'),
    Input('my-dpdn', 'value')
)
def update_bar(selected):
    dfb=data.sort_values(by=selected, ascending=False)
    figln = px.histogram(dfb,x='City',y=selected)
    return figln

@app.callback(
    Output('map', 'figure'),
    Input('my-dpdn', 'value')
)
def update_map(selected):
    fig = px.choropleth(df, locations="iso_alpha",
                    color=selected ,
                    hover_name="City", 
                    color_continuous_scale=px.colors.sequential.Plasma)
    return fig

if __name__ == "__main__":
    app.run_server()

!pip install matplotlib --force-reinstall --user

countries = pd.read_json("country-by-capital-city.json")
data['City'] = data['City'].str.upper()
countries['city'] = countries['city'].str.upper()
df = pd.merge(data, countries, how='left', left_on='City', right_on='city')

ii = px.data.gapminder().query("year==2007")
df = pd.merge(df, ii, how='left', left_on='country', right_on='country')

fig = px.choropleth(df, locations="iso_alpha",
                    color="Obesity levels(Country)",
                    hover_name="country", 
                    color_continuous_scale=px.colors.sequential.Plasma)
fig.show()

df

